import { motion, AnimatePresence } from 'framer-motion'


const WorkItem = ({ work_data }) => {
    console.log("rendered")
    
    const synonyms = {
        "type-fix": ["ремонт", "чинить", "исправление", "восстановление", "починка", "ремонтировать", "наладка", "устранение", "реставрация", "восстановление"],
        "type-clear": ["чистка", "очистка", "профилактика", "очищение", "уборка", "протирка", "дезинфекция", "стерилизация", "вымывание", "мойка"],
        "type-install": ["установка", "инсталляция", "подключение", "монтаж", "подключить", "размещение", "монтаж", "монтирование", "прикрепление", "постановка"],
        "type-not-working": ["не работает", "не функционирует", "проблема", "неисправность", "сломалось", "ошибка", "поломка", "авария", "дефект", "сбой"],
        "type-upgrade": ["обновление", "пересборка", "модернизация", "улучшение", "ремонт", "обновить", "доработка", "восстановление", "изменение", "повышение"],
        "type-network": ["интернет", "сеть", "wi-fi", "wi fi", "WiFi",  "подключение", "маршрутизатор", "связь", "локальная сеть", "беспроводная сеть", "коммуникация", "интернет-соединение"],
        "type-hardware": ["аппаратное обеспечение", "компоненты", "железо", "устройства", "оборудование", "железные детали", "аппаратура", "техническое оборудование", "платы", "периферийные устройства"],
        "type-software": ["программное обеспечение", "приложения", "софт", "операционная система", "программы", "программное обеспечение", "ПО", "прикладное программное обеспечение", "программное обеспечение системы", "программное обеспечение устройств"]
    };

    const classifyWork = (data) => {
        // Приводим входную строку к нижнему регистру для удобства сравнения
        const lowerData = data.toLowerCase();
    
        // Перебираем каждый тип работ и его синонимы
        for (const [type, synonymsArray] of Object.entries(synonyms)) {
            // Проверяем, содержит ли входная строка хотя бы один синоним данного типа
            if (synonymsArray.some(synonym => lowerData.includes(synonym))) {
                return type; // Возвращаем тип работы, если найден синоним
            }
        }
    
        // Если не найдено совпадений, возвращаем пустую строку или другое значение по умолчанию
        return 'type-fix';
    };

    const workType = classifyWork(work_data.task_description);

    return (
        <AnimatePresence>
            <motion.div 
                className={`item__general__tasks-task ${workType}`}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0, transition: 0.2 }}
            >
                {work_data.task_description}
            </motion.div>
        </AnimatePresence>
    )
}


export default WorkItem;